name: EC2 Test Runner with Allure Upload

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  run-on-ec2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2  # adjust if your EC2 is in another region

      - name: Start EC2 Instance
        run: |
          aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Waiting for EC2 to become ready..."
          aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Waiting for EC2 status checks to pass..."
          aws ec2 wait instance-status-ok --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Waiting extra 30 seconds for SSH to be ready..."
          sleep 30

      - name: Setup SSH for EC2 access
        run: |
          mkdir -p $HOME/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > $HOME/.ssh/id_rsa
          chmod 600 $HOME/.ssh/id_rsa

      - name: Run tests and upload Allure report on EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ec2-user/.ssh
            git pull origin main
            docker build -t playwright_allure2/playwright_test:latest .
            docker run --rm -v $(pwd)/allure-report:/usr/src/app/allure-report playwright_allure2/playwright_test
            aws s3 cp allure-report s3://ipsitas3/allure-report --recursive
            EOF

      - name: Install & Initialize Kubernetes via SSH
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
          
        # Install Docker
            sudo dnf update -y
            sudo dnf install -y docker conntrack socat ebtables
            sudo systemctl enable docker
            sudo systemctl start docker
          
            sudo dnf remove -y kubelet
            sudo rm -f /etc/systemd/system/kubelet.service
            sudo systemctl daemon-reexec
            sudo systemctl daemon-reload

        # Install kubectl, kubeadm, kubelet manually
            K8S_VERSION=v1.29.0
          
            # kubectl
            curl -LO https://dl.k8s.io/release/\$K8S_VERSION/bin/linux/amd64/kubectl
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
          
            # kubeadm
            curl -LO https://dl.k8s.io/release/\$K8S_VERSION/bin/linux/amd64/kubeadm
            chmod +x kubeadm
            sudo mv kubeadm /usr/local/bin/
          
            # kubelet
            curl -LO https://dl.k8s.io/release/\$K8S_VERSION/bin/linux/amd64/kubelet
            chmod +x kubelet
            sudo mv kubelet /usr/local/bin/
          
            # Setup kubelet as a systemd service
            sudo bash -c 'cat <<EOF2 > /etc/systemd/system/kubelet.service
          [ Unit ]
          Description=kubelet: The Kubernetes Node Agent
          Documentation=https://kubernetes.io/docs/home/
          After=network.target
      
          [ Service ]
          ExecStart=/usr/local/bin/kubelet
          Restart=always
          StartLimitInterval=0
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          EOF2'
          
          sudo systemctl daemon-reexec
          sudo systemctl daemon-reload
          sudo systemctl enable kubelet
          sudo systemctl start kubelet
          
          # Disable swap (required for kubeadm)
          sudo swapoff -a
          
          # Reset (clean up any existing cluster config if re-run)
          sudo kubeadm reset -f
          
          # Initialize the Kubernetes cluster
          sudo kubeadm init --pod-network-cidr=10.244.0.0/16
          
          # Setup kubeconfig
          mkdir -p \$HOME/.kube
          sudo cp -i /etc/kubernetes/admin.conf \$HOME/.kube/config
          sudo chown \$(id -u):\$(id -g) \$HOME/.kube/config
          
          # Apply Flannel CNI plugin
          kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
          
          echo "âœ… Kubernetes setup complete!"
          EOF
      

      - name: Stop EC2 instance
        if: always()
        run: |
          aws ec2 stop-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}


