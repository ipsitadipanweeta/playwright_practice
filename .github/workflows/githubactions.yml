name: EC2 Test Runner with Allure Upload

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  run-on-ec2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2  # adjust if your EC2 is in another region

      - name: Start EC2 Instance
        run: |
          aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Waiting for EC2 to become ready..."
          aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Waiting for EC2 status checks to pass..."
          aws ec2 wait instance-status-ok --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Waiting extra 30 seconds for SSH to be ready..."
          sleep 30

      - name: Setup SSH for EC2 access
        run: |
          mkdir -p $HOME/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > $HOME/.ssh/id_rsa
          chmod 600 $HOME/.ssh/id_rsa

      - name: Run tests and upload Allure report on EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ec2-user/.ssh
            git pull origin main
            docker build -t playwright_allure2/playwright_test:latest .
            docker run --rm -v $(pwd)/allure-report:/usr/src/app/allure-report playwright_allure2/playwright_test
            aws s3 cp allure-report s3://ipsitas3/allure-report --recursive
          EOF

      - name: Install & Initialize Kubernetes on Ubuntu 20.04 EC2 via SSH
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
          
            # Update and install Docker
            sudo apt-get update -y
            sudo apt-get install -y docker.io apt-transport-https ca-certificates curl
          
            sudo systemctl enable docker
            sudo systemctl start docker
          
            # Disable swap (required for Kubernetes)
            sudo swapoff -a
            sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
          
            # Add Kubernetes APT repo
            sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
            echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list > /dev/null
          
            # Install Kubernetes components
            sudo apt-get update -y
            sudo apt-get install -y kubelet kubeadm kubectl
            sudo apt-mark hold kubelet kubeadm kubectl
          
            # Reset any old setup
            sudo kubeadm reset -f || true
            sudo systemctl daemon-reload
            sudo systemctl restart kubelet
          
            # Initialize Kubernetes
            sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=NumCPU,Mem
          
            # Set up kubeconfig
            mkdir -p \$HOME/.kube
            sudo cp -i /etc/kubernetes/admin.conf \$HOME/.kube/config
            sudo chown \$(id -u):\$(id -g) \$HOME/.kube/config
          
            # Apply Flannel CNI
            kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
          
            echo "âœ… Kubernetes cluster is up on Ubuntu 20.04!"
          EOF

      - name: Stop EC2 instance
        if: always()
        run: |
          aws ec2 stop-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}


