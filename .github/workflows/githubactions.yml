name: EC2 Test Runner with Allure Upload

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  run-on-ec2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2  # adjust if your EC2 is in another region

      - name: Start EC2 Instance
        run: |
          aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Waiting for EC2 to become ready..."
          aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Waiting for EC2 status checks to pass..."
          aws ec2 wait instance-status-ok --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Waiting extra 30 seconds for SSH to be ready..."
          sleep 30

      - name: Setup SSH for EC2 access
        run: |
          mkdir -p $HOME/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > $HOME/.ssh/id_rsa
          chmod 600 $HOME/.ssh/id_rsa

#      - name: Run tests and upload Allure report on EC2
#        run: |
#          ssh -i ~/.ssh/id_rsa \
#              -o StrictHostKeyChecking=no \
#              -o ServerAliveInterval=60 \
#              -o ServerAliveCountMax=10 \
#              ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
#            set -ex
#            cd /home/ec2-user/playwright_practice
#
#            echo "Pulling latest code..."
#            git pull origin main
#
#            echo "Building Docker image..."
#            timeout 10m docker build -t playwright_allure2/playwright_test:latest .
#
#
#            echo "Running tests..."
#            timeout 15m docker run --rm -v $(pwd)/allure-report:/usr/src/app/allure-report playwright_allure2/playwright_test
#
#            echo "Uploading Allure report..."
#            aws s3 cp allure-report s3://ipsitas3/allure-report --recursive
#
#            echo "âœ… Done"
#          EOF
#
      - name: Apply Kubernetes manifests via SSH
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            kubectl apply -f /home/ec2-user/k8s/kubernetes.yaml
          EOF

      - name: Install K3s and Setup Kubernetes Cluster
        run: |
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            curl -sfL https://get.k3s.io | sh -
            mkdir -p ~/.kube
            sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
            sudo chown $(id -u):$(id -g) ~/.kube/config
          EOF

      - name: Copy kubeconfig from EC2 to runner
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST }} 'cat ~/.kube/config' > kubeconfig
          mkdir -p ~/.kube
          sed -i "s/127.0.0.1/${{ secrets.EC2_HOST }}/g" kubeconfig
          mv kubeconfig ~/.kube/config

      - name: Install kubectl
        run: |
          KUBECTL_VERSION="v1.29.0"
          curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Deploy tests to Kubernetes
        run: kubectl apply -f k8s/kubernetes.yaml

      - name: Wait for job completion
        run: |
          kubectl wait --for=condition=complete --timeout=300s job/kubernetes

      - name: Copy Allure report to S3 from EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            aws s3 cp /home/ec2-user/allure-report s3://your-s3-bucket/allure-report --recursive
          EOF

      - name: Stop EC2 instance
        if: always()
        run: |
          aws ec2 stop-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
