name: EC2 Test Runner with Allure Upload

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  run-on-ec2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2  # adjust if your EC2 is in another region

      - name: Start EC2 Instance
        run: |
          aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Waiting for EC2 to become ready..."
          aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Waiting for EC2 status checks to pass..."
          aws ec2 wait instance-status-ok --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Waiting extra 30 seconds for SSH to be ready..."
          sleep 30

      - name: Setup SSH for EC2 access
        run: |
          mkdir -p $HOME/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > $HOME/.ssh/id_rsa
          chmod 600 $HOME/.ssh/id_rsa

      - name: Run tests and upload Allure report on EC2
        run: |
          ssh -i ~/.ssh/id_rsa \
              -o StrictHostKeyChecking=no \
              -o ServerAliveInterval=60 \
              -o ServerAliveCountMax=10 \
              ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            set -ex
            cd /home/ec2-user/playwright_practice

            echo "Pulling latest code..."
            git pull origin main

            echo "Building Docker image..."
            timeout 10m docker build -t playwright_allure2/playwright_test:latest .


            echo "Running tests..."
            timeout 15m docker run --rm -v $(pwd)/allure-report:/usr/src/app/allure-report playwright_allure2/playwright_test

            echo "Uploading Allure report..."
            aws s3 cp allure-report s3://ipsitas3/allure-report --recursive

            echo "✅ Done"
          EOF
      
      

      - name: Install K3s & Deploy Tests
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          
          # Install K3s
          curl -sfL https://get.k3s.io | sh -
          export KUBECONFIG=/etc/rancher/k3s/kubernetes.yaml
          
          # Clone your repo
          mkdir -p ~/test-project
          cd ~/test-project
          git clone https://github.com/ipsitadipanweeta/playwright_practice.git .
          cat <<EOF2 > kubernetes.yaml
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: playwright-tests
          spec:
            template:
              spec:
                containers:
                  - name: tests
                    image: playwright_allure2/playwright_test:latest
                    volumeMounts:
                      - name: allure
                        mountPath: /usr/src/app/allure-report
                restartPolicy: Never
                volumes:
                  - name: allure
                    emptyDir: { }
          backoffLimit: 1
          EOF2
      
          docker build -t playwright_allure2/playwright_test:latest .
          k3s kubectl apply -f kubernetes.yaml
      
          echo "✅ Job started. Waiting for completion..."
          while [[ $(k3s kubectl get jobs playwright-tests -o jsonpath='{.status.succeeded}') != "1" ]]; do
          echo "Waiting for job..."
          sleep 10
          done
      
          echo "✅ Job complete. Exporting Allure report..."
          POD_NAME=$(k3s kubectl get pod -l job-name=playwright-tests -o jsonpath="{.items[0].metadata.name}")
          k3s kubectl cp $POD_NAME:/usr/src/app/allure-report ./allure-report
          
          aws s3 cp allure-report s3://ipsitas3/allure-report --recursive
          EOF

      - name: Stop EC2 instance
        if: always()
        run: |
          aws ec2 stop-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
