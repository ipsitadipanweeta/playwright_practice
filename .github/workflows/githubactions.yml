name: EC2 Test Runner with Allure Upload

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  run-on-ec2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2  # adjust if your EC2 is in another region

      - name: Start EC2 Instance
        run: |
          aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Waiting for EC2 to become ready..."
          aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}

      - name: Setup SSH for EC2 access
        run: |
          mkdir -p $HOME/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > $HOME/.ssh/id_rsa
          chmod 600 $HOME/.ssh/id_rsa

      - name: Run tests and upload Allure report on EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ec2-user/.ssh
            git pull origin main
            docker build -t playwright_allure2/playwright_test:latest .
            docker run --rm -v $(pwd)/allure-report:/usr/src/app/allure-report playwright_allure2/playwright_test
            aws s3 cp allure-report s3://ipsitas3/allure-report --recursive
          EOF

      - name: Deploy Playwright Test Job to Kubernetes
        run: |
          kubectl apply -f k8s/kubernetes.yaml

      - name: Stop EC2 instance
        if: always()
        run: |
          aws ec2 stop-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}


#  k8s-tests:
#    runs-on: ubuntu-latest
#    needs: run-on-ec2  # Optional: only run after ec2-tests completes
#
#    steps:
#      - name: Install Kubernetes on EC2 via SSH
#        run: |
#          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_MASTER_IP }} << 'EOF'
#            # Install Docker and Kubernetes components
#            sudo apt update
#            sudo apt install -y docker.io apt-transport-https curl
#
#            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
#            echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
#
#            sudo apt update
#            sudo apt install -y kubelet kubeadm kubectl
#
#            # Initialize Kubernetes
#            sudo kubeadm init --pod-network-cidr=10.244.0.0/16
#
#            # Set up kubeconfig for ec2-user
#            mkdir -p $HOME/.kube
#            sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
#            sudo chown $(id -u):$(id -g) $HOME/.kube/config
#
#            # Apply a network plugin (Flannel)
#            kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
#          EOF
